open System

module ListOperations =

    // Функция для добавления элемента в конец списка
    let addElement list element =
        list @ [element]

    // Функция для удаления первого вхождения элемента из списка
    let removeElement list element =
        list |> List.filter (fun x -> x <> element)

    // Функция для поиска элемента (проверяет, существует ли элемент в списке)
    let findElement list element =
        list |> List.exists (fun x -> x = element)

    // Функция для сцепки (слияния) двух списков
    let concatenateLists list1 list2 =
        list1 @ list2

    // Функция для получения элемента по индексу
    let getElementByIndex list index =
        if index < 0 || index >= List.length list then
            failwith "Индекс за пределами списка"
        else
            list.[index]

[<EntryPoint>]
let main argv =
    printfn "Операции со списком:"
    printfn "1 - Добавить элемент"
    printfn "2 - Удалить элемент"
    printfn "3 - Найти элемент"
    printfn "4 - Сцепить список с другим"
    printfn "5 - Получить элемент по индексу"
    printfn "6 - Показать текущий список"
    printfn "0 - Выйти"

    let rec operations (currentList: int list) =
        printf "\nВведите номер операции: "

        match Console.ReadLine() with
        | "1" ->
            printf "Введите элемент для добавления: "
            let value = Console.ReadLine() |> Int32.Parse
            let updatedList = ListOperations.addElement currentList value
            printfn "Элемент добавлен. Текущий список: %A" updatedList
            operations updatedList

        | "2" ->
            printf "Введите элемент для удаления: "
            let value = Console.ReadLine() |> Int32.Parse
            let updatedList = ListOperations.removeElement currentList value
            printfn "Элемент удалён (если существовал). Текущий список: %A" updatedList
            operations updatedList

        | "3" ->
            printf "Введите элемент для поиска: "
            let value = Console.ReadLine() |> Int32.Parse
            let exists = ListOperations.findElement currentList value
            if exists then
                printfn "Элемент найден в списке."
            else
                printfn "Элемент не найден."
            operations currentList

        | "4" ->
            printf "Введите второй список (разделите элементы пробелами): "
            let secondList = Console.ReadLine().Split(' ') |> Array.map Int32.Parse |> Array.toList
            let updatedList = ListOperations.concatenateLists currentList secondList
            printfn "Списки объединены. Текущий список: %A" updatedList
            operations updatedList

        | "5" ->
            printf "Введите индекс элемента: "
            let index = Console.ReadLine() |> Int32.Parse
            try
                let element = ListOperations.getElementByIndex currentList index
                printfn "Элемент по индексу %d: %d" index element
            with
            | :? System.Exception as ex ->
                printfn "Ошибка: %s" ex.Message
            operations currentList

        | "6" ->
            printfn "Текущий список: %A" currentList
            operations currentList

        | "0" ->
            printfn "Выход из программы."

        | _ ->
            printfn "Некорректная операция. Попробуйте снова."
            operations currentList

    // Изначально пустой список передаётся в рекурсивную функцию
    operations []
    0 // Возврат кода завершения
